name: Desplegar en VPS (Producci√≥n)

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install -g pnpm
  
      - name: Install dependencies
        run: pnpm install

      - name: Build project
        run: pnpm run build
        env:
          VITE_ENVIRONMENT: 'production'
          VITE_ODOO_API_URL: 'https://phides-api.phicargo-sistemas.online'
          VITE_PHIDES_API_URL: 'https://phides.phicargo-sistemas.online/phicargo'
          VITE_WEBSOCKET_SERVER: 'wss://phides-api.phicargo-sistemas.online/ws/'
          VITE_SENTRY_DNS: ${{ secrets.SENTRY_DSN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        run: docker build -f Dockerfile.prod -t phicargo-react:latest .

      - name: Save Docker Image as tar file
        run: docker save phicargo-react:latest -o phicargo-react-image.tar

      # Configurar clave SSH en runner
      - name: Configurar clave SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Verificaci√≥n previa de conexi√≥n SSH
      - name: Verificar conexi√≥n SSH con VPS
        run: ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} "echo 'üîå Conexi√≥n SSH OK'"

      # Crear carpeta en VPS
      - name: Crear carpeta en VPS
        run: ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} "mkdir -p /root/workspace/phicargo-react"

      # Copiar Docker image con reintentos
      - name: Copy Docker image to VPS
        run: |
          for i in {1..3}; do
            scp -o StrictHostKeyChecking=no ./phicargo-react-image.tar root@${{ secrets.VPS_HOST }}:/root/workspace/phicargo-react/ && break
            echo "Intento $i fallido, reintentando en 5s..."
            sleep 5
          done

      # Copiar Docker Compose con reintentos
      - name: Copy Docker Compose file to VPS
        run: |
          for i in {1..3}; do
            scp -o StrictHostKeyChecking=no ./docker-compose.prod.yml root@${{ secrets.VPS_HOST }}:/root/workspace/phicargo-react/ && break
            echo "Intento $i fallido, reintentando en 5s..."
          done

      # Verificar que la imagen lleg√≥
      - name: Verificar que la imagen lleg√≥
        run: ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} "ls -l /root/workspace/phicargo-react"

      # Deploy en VPS
      - name: SSH to VPS and deploy
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} << 'EOF'
            set -e
            WORKDIR=/root/workspace/phicargo-react

            echo "1Ô∏è‚É£ Comprobando permisos en $WORKDIR..."
            mkdir -p $WORKDIR || { echo "‚ùå No se puede crear el directorio"; exit 1; }
            touch $WORKDIR/test_perm || { echo "‚ùå No se pueden crear archivos"; exit 1; }
            rm $WORKDIR/test_perm
            echo "‚úÖ Permisos OK"

            echo "2Ô∏è‚É£ Verificando que la imagen Docker lleg√≥..."
            if [ ! -f $WORKDIR/phicargo-react-image.tar ]; then
              echo "‚ùå No se encontr√≥ el archivo phicargo-react-image.tar en $WORKDIR"
              exit 1
            fi
            echo "‚úÖ Imagen encontrada"

            echo "3Ô∏è‚É£ Deteniendo contenedores existentes..."
            docker compose -f $WORKDIR/docker-compose.prod.yml down || echo "No hab√≠a contenedores activos."

            EXISTING_CONTAINER=$(docker ps -aq -f name=phicargo-react)
            if [ -n "$EXISTING_CONTAINER" ]; then
              docker rm -f $EXISTING_CONTAINER
            fi

            EXISTING_IMAGE=$(docker images -q phicargo-react:latest)
            if [ -n "$EXISTING_IMAGE" ]; then
              docker rmi -f $EXISTING_IMAGE || echo "No se pudo eliminar la imagen antigua"
            fi

            echo "4Ô∏è‚É£ Cargando nueva imagen Docker..."
            docker load -i $WORKDIR/phicargo-react-image.tar || { echo "Fallo al cargar la imagen"; exit 1; }
            echo "‚úÖ Imagen cargada (archivo .tar conservado)"

            echo "5Ô∏è‚É£ Levantando contenedores..."
            docker compose -f $WORKDIR/docker-compose.prod.yml up -d || { 
              echo "Fallo al levantar contenedores"; 
              docker compose -f $WORKDIR/docker-compose.prod.yml logs --no-color;
              exit 1; 
            }

            RUNNING=$(docker ps -q -f name=phicargo-react)
            if [ -z "$RUNNING" ]; then
              echo "‚ùå El contenedor no est√° corriendo. Revisar logs."
              docker compose -f $WORKDIR/docker-compose.prod.yml logs --no-color
              exit 1
            else
              echo "‚úÖ Contenedor desplegado correctamente"
            fi
          EOF
